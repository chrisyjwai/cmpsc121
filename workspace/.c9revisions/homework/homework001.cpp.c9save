{"ts":1378241754998,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#include<iostream>\r\n\r\nusing namespace std;\r\n\r\ndouble maxRange(double,double);\r\ndouble maxHeight(double,double);\r\ndouble sevenCranks(double,double);\r\n\r\ndouble xInitial;\r\ndouble tInitial;\r\n\r\nint main() {\r\n\r\n\tcout << \"How far (in meters) did the rock move after one revolution?\" << endl;\r\n\r\n\tcin >> xInitial;\r\n\r\n\tcout << \"How much time (in seconds) did it take to get there?\" << endl;\r\n\r\n\tcin >> tInitial;\r\n\r\n\tcout << \"The maximum range for this mortar seems to be \" << maxRange(xInitial,tInitial) << \" meters.\" << endl;\r\n\r\n\tcout << \"At 8 cranks, the projectile would be at a height of \" << maxHeight(xInitial,tInitial) << \" meters.\" << endl;\r\n\r\n\tcout << \"To hit at only 7 cranks requires launching from a height of \" << sevenCranks(xInitial,tInitial) << \" meters.\" << endl;\r\n\t\r\n\treturn 0;\r\n\r\n}\r\n\r\ndouble maxRange(double p,double q) {\r\n\r\n\tdouble vInitial;\r\n\r\n\tdouble g;\r\n\r\n\tdouble t9;\r\n\r\n\tvInitial =  p / q;\r\n\r\n\tg = - ((2 * vInitial) / q);\r\n\r\n\tt9 = - ((9 * vInitial) / (g / 2));\r\n\r\n\treturn (9 * vInitial * t9);\r\n\r\n}\r\n\r\ndouble maxHeight(double p,double q) {\r\n\r\n\tdouble vInitial;\r\n\r\n\tdouble x;\r\n\r\n\tdouble g;\r\n\r\n\tdouble t8;\r\n\r\n\tvInitial =  p / q;\r\n\r\n\tg = - ((2 * vInitial) / q);\r\n\r\n\tt8 = - ((8 * vInitial) / (g / 2));\r\n\r\n\treturn (((8 * vInitial) * (t8 / 2)) - ((g / 2) * (t8 / 2) * (t8 / 2)));\r\n\r\n}\r\n\r\ndouble sevenCranks(double p,double q) {\r\n\r\n\tdouble vInitial;\r\n\r\n\tdouble g;\r\n\r\n\tdouble t7;\r\n\r\n\tdouble tRaise;\r\n\r\n\tvInitial =  p / q;\r\n\r\n\tg = - ((2 * vInitial) / q);\r\n\r\n\tt7 = - ((7 * vInitial) / (g / 2));\r\n\r\n\ttRaise = (750 / (7 * vInitial));\r\n\r\n\treturn (- (((7 * vInitial) * tRaise) - ((g / 2) * tRaise * tRaise)));\r\n\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":1614}]],"length":1614}
{"contributors":[],"silentsave":false,"ts":1378243609465,"patch":[[{"diffs":[[0,"8 / 2)) "],[-1,"-"],[1,"+"],[0," ((g / 2"]],"start1":1244,"start2":1244,"length1":17,"length2":17},{"diffs":[[0,"tRaise) "],[-1,"-"],[1,"+"],[0," ((g / 2"]],"start1":1569,"start2":1569,"length1":17,"length2":17}]],"length":1614,"saved":false}
{"ts":1378246657567,"patch":[[{"diffs":[[0,"n >> xInitial;\r\n"],[1,"\t"],[0,"\r\n\t"],[1,"if (xInitial >= 12 && xInitial <= 15) {\r\n\t    \r\n\t    "],[0,"cout << \"How muc"]],"start1":291,"start2":291,"length1":35,"length2":89},{"diffs":[[0,"\" << endl;\r\n"],[-1,"\r\n\t"],[1,"\t    \r\n\t    "],[0,"cin >> tInit"]],"start1":425,"start2":425,"length1":27,"length2":36},{"diffs":[[0,"Initial;\r\n\r\n"],[1,"    "],[0,"\tcout << \"Th"]],"start1":457,"start2":457,"length1":24,"length2":28},{"diffs":[[0,"s.\" << endl;\r\n\r\n"],[1,"    "],[0,"\tcout << \"At 8 c"]],"start1":572,"start2":572,"length1":32,"length2":36},{"diffs":[[0,"<< endl;\r\n\r\n"],[1,"    "],[0,"\tcout << \"To"]],"start1":702,"start2":702,"length1":24,"length2":28},{"diffs":[[0,"l;\r\n"],[-1,"\t\r\n\treturn 0;"],[1,"    \t\r\n    \treturn 0;\r\n    \t\r\n    \t}\r\n\t\r\n\telse {\r\n\t    \r\n\t    cout << \"The value should be between 12 and 15. The program will now terminate\" << endl;\r\n\t    \r\n\t    return 0;\r\n\t    \r\n\t}"],[0,"\r\n\r\n"]],"start1":844,"start2":844,"length1":21,"length2":192}]],"length":1860,"saved":false}
{"ts":1378248086091,"patch":[[{"diffs":[[0,"g;\r\n"],[-1,"\r\n\tdouble t7;\r\n"],[1,"\t"],[0,"\r\n\td"]],"start1":1614,"start2":1614,"length1":23,"length2":9},{"diffs":[[0,"\r\n\r\n"],[-1,"\tt7 = - ((7 * vInitial) / (g / 2));\r\n\r\n"],[0,"\ttRa"]],"start1":1691,"start2":1691,"length1":47,"length2":8}]],"length":1807,"saved":false}
{"ts":1378255281324,"patch":[[{"diffs":[[0,"le);"],[-1,"\r\ndouble maxHeight(double,double);\r\ndouble sevenCranks(double,double);\r\n\r\ndouble xInitial;\r\ndouble tInitial;"],[1," // This function will evaluate the maximum range of the mortar.\r\ndouble maxHeight(double,double); // This function will evaluate the maximum height of the rock at 8 cranks.\r\ndouble sevenCranks(double,double); // This function will evaluate the height a mortar at 7 cranks will have to raised to hit a target at exactly 750 meters.\r\n\r\ndouble xInitial; // Variable for horizontal distance at 1 crank.\r\ndouble tInitial; // Variable for time taken for 1 crank."],[0,"\r\n\r\n"]],"start1":73,"start2":73,"length1":116,"length2":465},{"diffs":[[0,"<= 15) {"],[1," // This if statement and the following else statement checks whether xInitial is in between 12 and 15."],[0,"\r\n\t    \r"]],"start1":691,"start2":691,"length1":16,"length2":119},{"diffs":[[0,"nitial =  p / q;"],[1," // Calculation of the initial horizontal and vertical "],[0,"\r\n\r\n\tg = - ((2 *"]],"start1":1586,"start2":1586,"length1":32,"length2":87}]],"length":2314,"saved":false}
{"ts":1378255531423,"patch":[[{"diffs":[[0,"double vInitial;"],[1," // Variable for initial horizontal and vertical velocity at one crank."],[0,"\r\n\r\n\tdouble g;\r\n"]],"start1":1534,"start2":1534,"length1":32,"length2":103},{"diffs":[[0,"ertical "],[1,"velocity."],[0,"\r\n\r\n\tg ="]],"start1":1720,"start2":1720,"length1":16,"length2":25},{"diffs":[[0,"itial) / q);"],[1," // Calculation of gravitational acceleration on the planet."],[0,"\r\n\r\n\tt9 = - "]],"start1":1757,"start2":1757,"length1":24,"length2":84},{"diffs":[[0,"ial;"],[-1,"\r\n\r\n\tdouble x;\r\n\r\n\tdouble g;\r\n\r\n\tdouble t8;\r\n\r\n\tvInitial =  p / q;\r\n\r\n\tg = - ((2 * vInitial) / q);\r\n\r\n\tt8 = - ((8 * vInitial) / (g / 2));\r\n\r\n\treturn (((8 * vInitial) * (t8 / 2)) + ((g / 2) * (t8 / 2) * (t8 / 2)));\r\n\r\n}\r\n\r\ndouble sevenCranks(double p,double q) {\r\n\r\n\tdouble vInitial;\r\n\r\n\tdouble g;\r\n\t\r\n\tdouble tRaise;\r\n\r\n\tvInitial =  p / q;\r\n\r\n\tg = - ((2 * vInitial) / q);"],[1," // Variable for initial horizontal and vertical velocity at one crank.\r\n\r\n\tdouble g;\r\n\r\n\tdouble t8;\r\n\r\n\tvInitial =  p / q; // Calculation of the initial horizontal and vertical velocity.\r\n\r\n\tg = - ((2 * vInitial) / q); // Calculation of gravitational acceleration on the planet.\r\n\r\n\tt8 = - ((8 * vInitial) / (g / 2));\r\n\r\n\treturn (((8 * vInitial) * (t8 / 2)) + ((g / 2) * (t8 / 2) * (t8 / 2)));\r\n\r\n}\r\n\r\ndouble sevenCranks(double p,double q) {\r\n\r\n\tdouble vInitial; // Variable for initial horizontal and vertical velocity at one crank.\r\n\r\n\tdouble g;\r\n\t\r\n\tdouble tRaise;\r\n\r\n\tvInitial =  p / q; // Calculation of the initial horizontal and vertical velocity.\r\n\r\n\tg = - ((2 * vInitial) / q); // Calculation of gravitational acceleration on the planet."],[0,"\r\n\r\n"]],"start1":1963,"start2":1963,"length1":379,"length2":755}]],"length":2830,"saved":false}
{"ts":1378255963000,"patch":[[{"diffs":[[0,"e g;"],[-1,"\r\n\r\n\tdouble t9;"],[1," // Variable for gravitational acceleration.\r\n\r\n\tdouble t9; // Variable for time rock is in the air for 9 cranks."],[0,"\r\n\r\n"]],"start1":1631,"start2":1631,"length1":23,"length2":121},{"diffs":[[0,"2));"],[-1,"\r\n\r\n\treturn (9 * vInitial * t9);"],[1," // Calculation of time rock is in the air for 9 cranks.\r\n\r\n\treturn (9 * vInitial * t9); // Function returns the value maximum range at 9 cranks."],[0,"\r\n\r\n"]],"start1":1962,"start2":1962,"length1":40,"length2":153},{"diffs":[[0,"e g;"],[-1,"\r\n\r\n\tdouble t8;"],[1," // Variable for gravitational acceleration.\r\n\r\n\tdouble t8; // Variable for time rock is in the air for 8 cranks."],[0,"\r\n\r\n"]],"start1":2259,"start2":2259,"length1":23,"length2":121},{"diffs":[[0,"g / 2));"],[1," // Calculation of time rock is in the air for 8 cranks."],[0,"\r\n\r\n\tret"]],"start1":2586,"start2":2586,"length1":16,"length2":72},{"diffs":[[0," (t8 / 2)));"],[1," // Function returns the height of the rock at the point it spends half it's time in the air."],[0,"\r\n\r\n}\r\n\r\ndou"]],"start1":2714,"start2":2714,"length1":24,"length2":117},{"diffs":[[0,"e g;"],[-1,"\r\n\t\r\n\tdouble tRaise;"],[1," // Variable for gravitational acceleration.\r\n\t\r\n\tdouble tRaise; // Variable for time needed for rock to reach 750 meters horizontally."],[0,"\r\n\r\n"]],"start1":2969,"start2":2969,"length1":28,"length2":143},{"diffs":[[0,"itial));"],[1," // Calculation of time needed for rock to reach 750 meters horizontally."],[0,"\r\n\r\n\tret"]],"start1":3316,"start2":3316,"length1":16,"length2":89},{"diffs":[[0,"aise)));"],[1," // Function returns the negative of how much the rock has gone under 0 vertically. "],[0,"\r\n\r\n}"]],"start1":3463,"start2":3463,"length1":13,"length2":97}]],"length":3560,"saved":false}
{"ts":1378257252081,"patch":[[{"diffs":[[0,"meters.\r"],[1,"\nint crankNumber(double);\r\ndouble firingHeight(double);\r"],[0,"\n\r\ndoubl"]],"start1":401,"start2":401,"length1":16,"length2":72},{"diffs":[[0," crank.\r"],[1,"\ndouble targetDistance;\r"],[0,"\n\r\nint m"]],"start1":583,"start2":583,"length1":16,"length2":40},{"diffs":[[0,"\t\r\n    \t"],[1,"cout << \"The mortar is now calibrated. Please enter the distance of the target.\" << endl;\r\n    \t\r\n    \tcin >> targetDistance;\r\n    \t\r\n    \tif (targetDistance >= 500 && targetDistance <= 1000) {\r\n    \t    \r\n    \t    cout << \"The mortar should be cranked \" << crankNumber(targetDistance) << \" times and raised to a height of \" << firingHeight(targetDistance) << \".\" << endl;\r\n    \t    \r\n    \t    "],[0,"return 0"]],"start1":1384,"start2":1384,"length1":16,"length2":410},{"diffs":[[0,"rn 0;\r\n    \t"],[1,"    "],[0,"\r\n    \t}\r\n\t\r"]],"start1":1790,"start2":1790,"length1":24,"length2":28},{"diffs":[[0,"    \t}\r\n"],[1,"    \t\r\n    \telse {\r\n    \t    \r\n    \t    cout << \"The distance of the target should be between 500 and 1000 meters. The program will not terminate.\"\r\n    \t    \r\n    \t    return 0;\r\n    \t    \r\n    \t}\r\n    \t\r\n    }\r\n"],[0,"\t\r\n\telse"]],"start1":1808,"start2":1808,"length1":16,"length2":229},{"diffs":[[0,"cally. \r\n\r\n}"],[1,"\r\n\r\nint crankNumber(x)"]],"start1":4239,"start2":4239,"length1":12,"length2":34}]],"length":4273,"saved":false}
{"ts":1378257774512,"patch":[[{"diffs":[[0,"ber("],[-1,"x)"],[1,"double x) {\r\n    \r\n    \r\n    \r\n}"]],"start1":4267,"start2":4267,"length1":6,"length2":36}]],"length":4303,"saved":false}
{"ts":1378265931246,"patch":[[{"diffs":[[0,"umber(double"],[1,",double,double"],[0,");\r\ndouble f"]],"start1":420,"start2":420,"length1":24,"length2":38},{"diffs":[[0,"eight(double"],[1,",double"],[0,");\r\n\r\ndouble"]],"start1":464,"start2":464,"length1":24,"length2":31},{"diffs":[[0,"stance;\r"],[1,"\ndouble cranks = 1; // Variable for number of cranks.\r"],[0,"\n\r\nint m"]],"start1":628,"start2":628,"length1":16,"length2":70},{"diffs":[[0,"d 15.\r\n\t"],[-1,"    "],[0,""],[1,""],[0,"\r\n\t    c"]],"start1":952,"start2":952,"length1":20,"length2":16},{"diffs":[[0,"kNumber("],[1,"xInitial,tInitial,"],[0,"targetDi"]],"start1":1725,"start2":1725,"length1":16,"length2":34},{"diffs":[[0,"gHeight("],[-1,"targetDistance"],[1,"xInitial,tInitial"],[0,") << \".\""]],"start1":1814,"start2":1814,"length1":30,"length2":33},{"diffs":[[0,"ble "],[-1,"x) {\r\n    \r\n    \r\n    "],[1,"p,double q,double x) {\r\n    \r\n    double vInitial; // Variable for initial horizontal and vertical velocity at one crank.\r\n\r\n\tdouble g; // Variable for gravitational acceleration.\r\n\r\n\tdouble time; // Variable for time rock is in the air for n cranks.\r\n\t\r\n\tdouble distance; // Variable for distance with n cranks.\r\n\r\n\tvInitial =  p / q; // Calculation of the initial horizontal and vertical velocity.\r\n\r\n\tg = - ((2 * vInitial) / q); // Calculation of gravitational acceleration on the planet.\r\n\r\n\ttime = - ((cranks * vInitial) / (g / 2)); // Calculation of time rock is in the air for n cranks.\r\n\r\n\tdistance = (cranks * vInitial * time); // Function returns the value maximum range at n cranks.\r\n    \r\n    if (distance < x) {\r\n        \r\n        cranks = cranks + 1;\r\n        \r\n        return crankNumber(p,q,x);\r\n        \r\n    }\r\n    \r\n    else {\r\n        \r\n        return (cranks - 1);\r\n        \r\n    }\r\n    \r\n}\r\n\r\ndouble firingHeight(double p,double q) {\r\n    \r\n    double vInitial; // Variable for initial horizontal and vertical velocity at one crank.\r\n\r\n\tdouble g; // Variable for gravitational acceleration.\r\n\t\r\n\tdouble tRaise; // Variable for time needed for rock to reach the target distance in meters horizontally.\r\n\r\n\tvInitial =  p / q; // Calculation of the initial horizontal and vertical velocity.\r\n\r\n\tg = - ((2 * vInitial) / q); // Calculation of gravitational acceleration on the planet.\r\n\r\n\ttRaise = (750 / (7 * vInitial)); // Calculation of time needed for rock to reach 750 meters horizontally.\r\n\r\n\treturn (- (((7 * vInitial) * tRaise) + ((g / 2) * tRaise * tRaise))); // Function returns the negative of how much the rock has gone under 0 vertically.\r\n\t"],[0,"\r\n}"]],"start1":4366,"start2":4366,"length1":29,"length2":1678}]],"length":6044,"saved":false}
{"ts":1378266012875,"patch":[[{"diffs":[[0,"ouble,double"],[1,",double"],[0,");\r\n\r\ndouble"]],"start1":471,"start2":471,"length1":24,"length2":31},{"diffs":[[0,"ial,tInitial"],[1,",targetDistance"],[0,") << \".\" << "]],"start1":1834,"start2":1834,"length1":24,"length2":39},{"diffs":[[0,"e p,double q"],[1,",double x"],[0,") {\r\n    \r\n "]],"start1":5332,"start2":5332,"length1":24,"length2":33},{"diffs":[[0,"\n\ttRaise = ("],[-1,"750"],[1,"x"],[0," / ("],[-1,"7"],[1,"(cranks - 1)"],[0," * vInitial)"]],"start1":5805,"start2":5805,"length1":32,"length2":41},{"diffs":[[0,"\r\n\treturn (- ((("],[-1,"7"],[1,"(cranks - 1)"],[0," * vInitial) * t"]],"start1":5923,"start2":5923,"length1":33,"length2":44}]],"length":6095,"saved":false}
{"ts":1378266064454,"patch":[[{"diffs":[[0," will no"],[-1,"t"],[1,"w"],[0," termina"]],"start1":2056,"start2":2056,"length1":17,"length2":17},{"diffs":[[0,"minate.\""],[1," << endl;"],[0,"\r\n    \t "]],"start1":2069,"start2":2069,"length1":16,"length2":25}]],"length":6104,"saved":false}
{"ts":1378266117683,"patch":[[{"diffs":[[0," 1000) {"],[1," // This if statement and the following else statement checks whether targetDistance is in between 500 and 1000."],[0,"\r\n    \t "]],"start1":1655,"start2":1655,"length1":16,"length2":128}]],"length":6216,"saved":false}
{"ts":1378266630241,"patch":[[{"diffs":[[0,"anks"],[-1," = 1"],[0,"; //"]],"start1":653,"start2":653,"length1":12,"length2":8}]],"length":6212,"saved":false}
{"ts":1378266699646,"patch":[[{"diffs":[[0,"e cranks"],[1," = 1"],[0,"; // Var"]],"start1":649,"start2":649,"length1":16,"length2":20}]],"length":6216,"saved":false}
{"ts":1378266849046,"patch":[[{"diffs":[[0,"ouble,double"],[1,",int"],[0,");\r\n\r\ndouble"]],"start1":478,"start2":478,"length1":24,"length2":28},{"diffs":[[0,"rgetDistance"],[1,",crankNumber(targetDistance)"],[0,") << \".\" << "]],"start1":1965,"start2":1965,"length1":24,"length2":52},{"diffs":[[0,"ouble q,double x"],[1,",int n"],[0,") {\r\n    \r\n    d"]],"start1":5490,"start2":5490,"length1":32,"length2":38},{"diffs":[[0,"= (x / ("],[-1,"(cranks - 1)"],[1,"n"],[0," * vInit"]],"start1":5973,"start2":5973,"length1":28,"length2":17},{"diffs":[[0,"n (- ((("],[-1,"(cranks - 1)"],[1,"n"],[0," * vInit"]],"start1":6079,"start2":6079,"length1":28,"length2":17}]],"length":6232,"saved":false}
{"ts":1378266888456,"patch":[[{"diffs":[[0,"kNumber("],[1,"xInitial,tInitial,"],[0,"targetDi"]],"start1":1982,"start2":1982,"length1":16,"length2":34}]],"length":6250,"saved":false}
{"ts":1378268629372,"patch":[[{"diffs":[[0,"e,double"],[-1,",double"],[0,");\r\ndoub"]],"start1":431,"start2":431,"length1":23,"length2":16},{"diffs":[[0,",double,"],[-1,"double,"],[0,"int);\r\n\r"]],"start1":469,"start2":469,"length1":23,"length2":16},{"diffs":[[0,"\ndouble "],[-1,"targetDistance;"],[1,"vInitial; // Variable for initial horizontal and vertical velocity at one crank.\r\ndouble g; // Variable for gravitational acceleration.\r\ndouble targetDistance; // Variable for the target distance."],[0,"\r\ndouble"]],"start1":609,"start2":609,"length1":31,"length2":212},{"diffs":[[0,"nitial;\r"],[1,"\n\t    \r\n\t    vInitial = xInitial / tInitial; //// Calculation of the initial horizontal and vertical velocity.\r\n\t    \r\n\t    g = - ((2 * vInitial) / q); // Calculation of gravitational acceleration on the planet.\r"],[0,"\n\r\n    \t"]],"start1":1239,"start2":1239,"length1":16,"length2":228},{"diffs":[[0,"axRange("],[-1,"xInitial,t"],[1,"v"],[0,"Initial)"]],"start1":1528,"start2":1528,"length1":26,"length2":17},{"diffs":[[0,"< maxHeight("],[-1,"xInitial,t"],[1,"v"],[0,"Initial) << "]],"start1":1641,"start2":1641,"length1":34,"length2":25},{"diffs":[[0,"nCranks("],[-1,"xInitial,t"],[1,"v"],[0,"Initial)"]],"start1":1772,"start2":1772,"length1":26,"length2":17},{"diffs":[[0,"crankNumber("],[-1,"xInitial,t"],[1,"v"],[0,"Initial,targ"]],"start1":2196,"start2":2196,"length1":34,"length2":25},{"diffs":[[0,"gHeight("],[-1,"xInitial,t"],[1,"v"],[0,"Initial,"]],"start1":2280,"start2":2280,"length1":26,"length2":17},{"diffs":[[0,"ber("],[-1,"xInitial,t"],[1,"v"],[0,"Init"]],"start1":2320,"start2":2320,"length1":18,"length2":9},{"diffs":[[0,"ange(double "],[-1,"p,double q"],[1,"v"],[0,") {\r\n\r\n\tdoub"]],"start1":2805,"start2":2805,"length1":34,"length2":25},{"diffs":[[0,"ble "],[-1,"vInitial; // Variable for initial horizontal and vertical velocity at one crank.\r\n\r\n\tdouble g; // Variable for gravitational acceleration.\r\n\r\n\tdouble t9; // Variable for time rock is in the air for 9 cranks.\r\n\r\n\tvInitial =  p / q; // Calculation of the initial horizontal and vertical velocity.\r\n\r\n\tg = - ((2 * vInitial) / q); // Calculation of gravitational acceleration on the planet"],[1,"t9; // Variable for time rock is in the air for 9 cranks"],[0,".\r\n\r"]],"start1":2829,"start2":2829,"length1":393,"length2":64},{"diffs":[[0," = - ((9 * v"],[-1,"Initial"],[0,") / (g / 2))"]],"start1":2897,"start2":2897,"length1":31,"length2":24},{"diffs":[[0,"eturn (9 * v"],[-1,"Initial"],[0," * t9); // F"]],"start1":2984,"start2":2984,"length1":31,"length2":24},{"diffs":[[0,"ight(double "],[-1,"p,double q"],[1,"v"],[0,") {\r\n\r\n\tdoub"]],"start1":3081,"start2":3081,"length1":34,"length2":25},{"diffs":[[0,"ble "],[-1,"vInitial; // Variable for initial horizontal and vertical velocity at one crank.\r\n\r\n\tdouble g; // Variable for gravitational acceleration.\r\n\r\n\tdouble t8; // Variable for time rock is in the air for 8 cranks.\r\n\r\n\tvInitial =  p / q; // Calculation of the initial horizontal and vertical velocity.\r\n\r\n\tg = - ((2 * vInitial) / q); // Calculation of gravitational acceleration on the planet"],[1,"t8; // Variable for time rock is in the air for 8 cranks"],[0,".\r\n\r"]],"start1":3105,"start2":3105,"length1":393,"length2":64},{"diffs":[[0," = - ((8 * v"],[-1,"Initial"],[0,") / (g / 2))"]],"start1":3173,"start2":3173,"length1":31,"length2":24},{"diffs":[[0,"urn (((8 * v"],[-1,"Initial"],[0,") * (t8 / 2)"]],"start1":3262,"start2":3262,"length1":31,"length2":24},{"diffs":[[0,"(double "],[-1,"p,double q"],[1,"v"],[0,") {\r\n\r\n\t"]],"start1":3443,"start2":3443,"length1":26,"length2":17},{"diffs":[[0,"ble "],[-1,"vInitial; // Variable for initial horizontal and vertical velocity at one crank.\r\n\r\n\tdouble g; // Variable for gravitational acceleration.\r\n\t\r\n\tdouble tRaise; // Variable for time needed for rock to reach 750 meters horizontally.\r\n\r\n\tvInitial =  p / q; // Calculation of the initial horizontal and vertical velocity.\r\n\r\n\tg = - ((2 * vInitial) / q); // Calculation of gravitational acceleration on the planet"],[1,"tRaise; // Variable for time needed for rock to reach 750 meters horizontally"],[0,".\r\n\r"]],"start1":3463,"start2":3463,"length1":415,"length2":85},{"diffs":[[0,"750 / (7 * v"],[-1,"Initial"],[0,")); // Calcu"]],"start1":3560,"start2":3560,"length1":31,"length2":24},{"diffs":[[0," (- (((7 * v"],[-1,"Initial"],[0,") * tRaise) "]],"start1":3659,"start2":3659,"length1":31,"length2":24},{"diffs":[[0,"mber(double "],[-1,"p,double q"],[1,"v"],[0,",double x) {"]],"start1":3819,"start2":3819,"length1":34,"length2":25},{"diffs":[[0,"  \r\n"],[-1,"    double vInitial; // Variable for initial horizontal and vertical velocity at one crank.\r\n\r\n\tdouble g; // Variable for gravitational acceleration.\r\n\r\n\tdouble time; // Variable for time rock is in the air for n cranks.\r\n\t\r\n\tdouble distance; // Variable for distance with n cranks.\r\n\r\n\tvInitial =  p / q; // Calculation of the initial horizontal and vertical velocity.\r\n\r\n\tg = - ((2 * vInitial) / q); // Calculation of gravitational acceleration on the planet"],[1,"\tdouble time; // Variable for time rock is in the air for n cranks.\r\n\t\r\n\tdouble distance; // Variable for distance with n cranks"],[0,".\r\n\r"]],"start1":3848,"start2":3848,"length1":468,"length2":136},{"diffs":[[0,"((cranks * v"],[-1,"Initial"],[0,") / (g / 2))"]],"start1":3995,"start2":3995,"length1":31,"length2":24},{"diffs":[[0,"anks * v"],[-1,"Initial"],[0," * time)"]],"start1":4095,"start2":4095,"length1":23,"length2":16},{"diffs":[[0,"x) {"],[-1,"\r\n        \r\n        cranks = cranks + 1;"],[1," // The following if else statement calculates the maximum number of cranks before the target distance.\r\n        \r\n        cranks = cranks + 1; // The number of cranks if the distance falls short of the targetDistance."],[0,"\r\n  "]],"start1":4196,"start2":4196,"length1":48,"length2":226},{"diffs":[[0,"ber("],[-1,"p,q"],[1,"v"],[0,",x);"],[1," // "],[0,"\r\n  "]],"start1":4453,"start2":4453,"length1":15,"length2":17},{"diffs":[[0,"\r\n    else {"],[1," // Once the distance with n cranks exceeds the targetDistance, this function returns the number of cranks minus 1."],[0,"\r\n        \r\n"]],"start1":4489,"start2":4489,"length1":24,"length2":139},{"diffs":[[0,"ble "],[-1,"p,double q"],[1,"v"],[0,",dou"]],"start1":4709,"start2":4709,"length1":18,"length2":9},{"diffs":[[0,"  \r\n"],[-1,"    double vInitial; // Variable for initial horizontal and vertical velocity at one crank.\r\n\r\n\tdouble g; // Variable for gravitational acceleration.\r\n\t\r\n\tdouble tRaise; // Variable for time needed for rock to reach the target distance in meters horizontally.\r\n\r\n\tvInitial =  p / q; // Calculation of the initial horizontal and vertical velocity.\r\n\r\n\tg = - ((2 * vInitial) / q); // Calculation of gravitational acceleration on the planet"],[1,"\tdouble tRaise; // Variable for time needed for rock to reach the target distance in meters horizontally"],[0,".\r\n\r"]],"start1":4736,"start2":4736,"length1":445,"length2":112},{"diffs":[[0,"/ (n * v"],[-1,"Initial"],[0,")); // C"]],"start1":4862,"start2":4862,"length1":23,"length2":16},{"diffs":[[0,"r rock to reach "],[-1,"750"],[1,"the target distance in"],[0," meters horizont"]],"start1":4906,"start2":4906,"length1":35,"length2":54},{"diffs":[[0,"(((n * v"],[-1,"Initial"],[0,") * tRai"]],"start1":4980,"start2":4980,"length1":23,"length2":16}]],"length":5121,"saved":false}
{"ts":1378268721908,"patch":[[{"diffs":[[0,"Range(double"],[-1,",double"],[0,"); // This f"]],"start1":56,"start2":56,"length1":31,"length2":24},{"diffs":[[0,"eight(double"],[-1,",double"],[0,"); // This f"]],"start1":147,"start2":147,"length1":31,"length2":24},{"diffs":[[0,"s(double"],[-1,",double"],[0,"); // Th"]],"start1":255,"start2":255,"length1":23,"length2":16},{"diffs":[[0,"tial) / "],[-1,"q"],[1,"tInitial"],[0,"); // Ca"]],"start1":1366,"start2":1366,"length1":17,"length2":24}]],"length":5107,"saved":false}
{"ts":1378269270347,"patch":[[{"diffs":[[0,"axRange("],[-1,"double"],[0,"); // Th"]],"start1":54,"start2":54,"length1":22,"length2":16},{"diffs":[[0,"xHeight("],[-1,"double"],[0,"); // Th"]],"start1":139,"start2":139,"length1":22,"length2":16},{"diffs":[[0,"nCranks("],[-1,"double"],[0,"); // Th"]],"start1":237,"start2":237,"length1":22,"length2":16},{"diffs":[[0,"ber("],[-1,"double,double);\r\ndouble firingHeight(double,double,int);"],[1,"int); // This function calculates how many cranks needed before raising the mortar to reach the desired distance.\r\ndouble firingHeight(double,int); // This function calculates how high the mortar must be raised after cranked to reach the desired distance."],[0,"\r\n\r\n"]],"start1":383,"start2":383,"length1":64,"length2":263},{"diffs":[[0,"double v"],[-1,"Initial"],[0,""],[1,""],[0,"; // Var"]],"start1":770,"start2":770,"length1":23,"length2":16},{"diffs":[[0,"\r\n\t    v"],[-1,"Initial"],[0,""],[1,""],[0," = xInit"]],"start1":1406,"start2":1406,"length1":23,"length2":16},{"diffs":[[0,"axRange("],[-1,"vInitial"],[0,") << \" m"]],"start1":1681,"start2":1681,"length1":24,"length2":16},{"diffs":[[0,"xHeight("],[-1,"vInitial"],[0,") << \" m"]],"start1":1790,"start2":1790,"length1":24,"length2":16},{"diffs":[[0,"nCranks("],[-1,"vInitial"],[0,") << \" m"]],"start1":1909,"start2":1909,"length1":24,"length2":16},{"diffs":[[0,"kNumber("],[-1,"vInitial,targetDistance"],[1,"cranks"],[0,") << \" t"]],"start1":2329,"start2":2329,"length1":39,"length2":22},{"diffs":[[0,"axRange("],[-1,"double v"],[0,""],[1,""],[0,") {\r\n\r\n\t"]],"start1":2914,"start2":2914,"length1":24,"length2":16},{"diffs":[[0,"xHeight("],[-1,"double v"],[0,""],[1,""],[0,") {\r\n\r\n\t"]],"start1":3182,"start2":3182,"length1":24,"length2":16},{"diffs":[[0,"nCranks("],[-1,"double v"],[0,""],[1,""],[0,") {\r\n\r\n\t"]],"start1":3532,"start2":3532,"length1":24,"length2":16},{"diffs":[[0,"kNumber("],[-1,"double v,double x"],[1,"n"],[0,") {\r\n   "]],"start1":3904,"start2":3904,"length1":33,"length2":17},{"diffs":[[0,"e = - (("],[-1,"cranks"],[1,"n"],[0," * v) / "]],"start1":4061,"start2":4061,"length1":22,"length2":17},{"diffs":[[0,"ance = ("],[-1,"cranks"],[1,"n"],[0," * v * t"]],"start1":4152,"start2":4152,"length1":22,"length2":17},{"diffs":[[0,"tance < "],[-1,"x"],[1,"targetDistance"],[0,") { // T"]],"start1":4250,"start2":4250,"length1":17,"length2":30},{"diffs":[[0,"istance.\r\n      "],[-1,"  "],[0,"\r\n        cranks"]],"start1":4370,"start2":4370,"length1":34,"length2":32},{"diffs":[[0,"    "],[-1,"cranks = cranks"],[1,"return crankNumber(n"],[0," + 1"],[1,")"],[0,"; // "],[-1,"The number of cranks if the distance falls short of the targetDistance.\r\n        \r\n        return"],[1,"Function calls itself with an incremented"],[0," crank"],[-1,"N"],[1," n"],[0,"umber"],[-1,"(v,x); // "],[1,"."],[0,"\r\n  "]],"start1":4392,"start2":4392,"length1":151,"length2":93},{"diffs":[[0,"return ("],[-1,"cranks"],[1,"n"],[0," - 1);\r\n"]],"start1":4651,"start2":4651,"length1":22,"length2":17},{"diffs":[[0,"ght("],[-1,"double v,double x,"],[0,"int "]],"start1":4712,"start2":4712,"length1":26,"length2":8},{"diffs":[[0,"aise = ("],[-1,"x"],[1,"targetDistance"],[0," / (n * "]],"start1":4844,"start2":4844,"length1":17,"length2":30}]],"length":5126,"saved":false}
{"ts":1378269348628,"patch":[[{"diffs":[[0,"ght("],[-1,"double,"],[0,"int)"]],"start1":518,"start2":518,"length1":15,"length2":8},{"diffs":[[0,"ght("],[-1,"vInitial,targetDistance,crankNumber(vInitial,targetDistance"],[1,"crankNumber(cranks"],[0,")) <"]],"start1":2389,"start2":2389,"length1":67,"length2":26}]],"length":5078,"saved":false}
{"ts":1378269370837,"patch":[[{"diffs":[[0," ((2 * v"],[-1,"Initial"],[0,") / tIni"]],"start1":1515,"start2":1515,"length1":23,"length2":16}]],"length":5071,"saved":false}
{"ts":1378269400509,"patch":[[{"diffs":[[0,"kNumber("],[1,"int "],[0,"n) {\r\n  "]],"start1":3849,"start2":3849,"length1":16,"length2":20}]],"length":5075,"saved":false}
{"contributors":[],"silentsave":false,"ts":1378270455191,"patch":[[{"diffs":[[0,"#include"],[1," "],[0,"<iostrea"]],"start1":0,"start2":0,"length1":16,"length2":17}]],"length":5076,"saved":false}
